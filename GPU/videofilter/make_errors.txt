SIZE:[640 x 360]
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 682
-------------------------------------------
__kernel void convolution(__global const float * mask, __global const size_t * dimensions, __global const unsigned char * matrix, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t imax = dimensions[0];
  size_t jmax = dimensions[1];

  output[i * jmax + j] = 0;
  float buffer = 0;
  for (size_t ip = -1; ip < 1; ip++) {
    for (size_t jp = -1; jp < 1; jp++) {
      if ( ( ( i + ip < imax ) && ( j + jp < jmax ) ) && ( ( i + ip > 0 ) && ( j + jp > 0 ) ) ) {
        buffer += matrix[(i+ip) * jmax + (j+jp)] * mask[ip * 3 + jp];
      }
      // else add 0
    }
  }
  output[i * jmax + j] = convert_uchar_sat_rte(buffer);
}
-------------------------------------------
OpenCL took 48677 ms to compile the code and create the kernel.
Time to get the input : 743
Copying input matrix to buffer
Copying matrix took 1794 ms to run.
Running matrix convolution on GPU.
GPU took 656 ms to run.
Reading time : 303
GPU computation succeeded.
Freeing time : 213
Total execution time : 57514 cycles
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 682
-------------------------------------------
__kernel void convolution(__global const float * mask, __global const size_t * dimensions, __global const unsigned char * matrix, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t imax = dimensions[0];
  size_t jmax = dimensions[1];

  output[i * jmax + j] = 0;
  float buffer = 0;
  for (size_t ip = -1; ip < 1; ip++) {
    for (size_t jp = -1; jp < 1; jp++) {
      if ( ( ( i + ip < imax ) && ( j + jp < jmax ) ) && ( ( i + ip > 0 ) && ( j + jp > 0 ) ) ) {
        buffer += matrix[(i+ip) * jmax + (j+jp)] * mask[ip * 3 + jp];
      }
      // else add 0
    }
  }
  output[i * jmax + j] = convert_uchar_sat_rte(buffer);
}
-------------------------------------------
OpenCL took 15636 ms to compile the code and create the kernel.
Time to get the input : 441
Copying input matrix to buffer
Copying matrix took 1622 ms to run.
Running matrix convolution on GPU.
GPU took 590 ms to run.
Reading time : 293
GPU computation succeeded.
Freeing time : 177
Total execution time : 19862 cycles
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 682
-------------------------------------------
__kernel void convolution(__global const float * mask, __global const size_t * dimensions, __global const unsigned char * matrix, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t imax = dimensions[0];
  size_t jmax = dimensions[1];

  output[i * jmax + j] = 0;
  float buffer = 0;
  for (size_t ip = -1; ip < 1; ip++) {
    for (size_t jp = -1; jp < 1; jp++) {
      if ( ( ( i + ip < imax ) && ( j + jp < jmax ) ) && ( ( i + ip > 0 ) && ( j + jp > 0 ) ) ) {
        buffer += matrix[(i+ip) * jmax + (j+jp)] * mask[ip * 3 + jp];
      }
      // else add 0
    }
  }
  output[i * jmax + j] = convert_uchar_sat_rte(buffer);
}
-------------------------------------------
OpenCL took 14977 ms to compile the code and create the kernel.
Time to get the input : 460
Copying input matrix to buffer
Copying matrix took 1613 ms to run.
Running matrix convolution on GPU.
GPU took 623 ms to run.
Reading time : 516
GPU computation succeeded.
Freeing time : 199
Total execution time : 19444 cycles
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 682
-------------------------------------------
__kernel void convolution(__global const float * mask, __global const size_t * dimensions, __global const unsigned char * matrix, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t imax = dimensions[0];
  size_t jmax = dimensions[1];

  output[i * jmax + j] = 0;
  float buffer = 0;
  for (size_t ip = -1; ip < 1; ip++) {
    for (size_t jp = -1; jp < 1; jp++) {
      if ( ( ( i + ip < imax ) && ( j + jp < jmax ) ) && ( ( i + ip > 0 ) && ( j + jp > 0 ) ) ) {
        buffer += matrix[(i+ip) * jmax + (j+jp)] * mask[ip * 3 + jp];
      }
      // else add 0
    }
  }
  output[i * jmax + j] = convert_uchar_sat_rte(buffer);
}
-------------------------------------------
OpenCL took 15039 ms to compile the code and create the kernel.
Time to get the input : 597
Copying input matrix to buffer
Copying matrix took 1646 ms to run.
Running matrix convolution on GPU.
GPU took 566 ms to run.
Reading time : 293
GPU computation succeeded.
Freeing time : 181
Total execution time : 19485 cycles
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 682
-------------------------------------------
__kernel void convolution(__global const float * mask, __global const size_t * dimensions, __global const unsigned char * matrix, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t imax = dimensions[0];
  size_t jmax = dimensions[1];

  output[i * jmax + j] = 0;
  float buffer = 0;
  for (size_t ip = -1; ip < 1; ip++) {
    for (size_t jp = -1; jp < 1; jp++) {
      if ( ( ( i + ip < imax ) && ( j + jp < jmax ) ) && ( ( i + ip > 0 ) && ( j + jp > 0 ) ) ) {
        buffer += matrix[(i+ip) * jmax + (j+jp)] * mask[ip * 3 + jp];
      }
      // else add 0
    }
  }
  output[i * jmax + j] = convert_uchar_sat_rte(buffer);
}
-------------------------------------------
OpenCL took 15136 ms to compile the code and create the kernel.
Time to get the input : 425
Copying input matrix to buffer
Copying matrix took 1611 ms to run.
Running matrix convolution on GPU.
GPU took 574 ms to run.
Reading time : 300
GPU computation succeeded.
Freeing time : 216
Total execution time : 19308 cycles
Map mode
CL_PLATFORM_NAME                         = ARM Platform
CL_PLATFORM_VENDOR                       = ARM
CL_PLATFORM_VERSION                      = OpenCL 1.2 v1.r12p0-04rel0.03af15950392f3702b248717f4938b82

file size 387
-------------------------------------------
__kernel void norm(__global size_t * dimensions, __global unsigned char * input_a, __global unsigned char * input_b, __global unsigned char * output) {
  size_t i = get_global_id(0);
  size_t j = get_global_id(1);
  size_t jmax = dimensions[1];
  uchar a = input_a[i * jmax + j];
  uchar b = input_b[i * jmax + j];
  output[i * jmax + j] = convert_uchar_sat_rte(sqrt( a * a + b * b));
}
-------------------------------------------
Program Build failed
--- Build log ---
 <source>:7:48: error: call to 'sqrt' is ambiguous
  output[i * jmax + j] = convert_uchar_sat_rte(sqrt( a * a + b * b));
                                               ^~~~

note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
note: candidate function
error: Compiler frontend failed (error code 59)

